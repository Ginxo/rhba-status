import {
  CloudSyncOutlined,
  InfoCircleOutlined,
  LinkOutlined,
  ReloadOutlined,
  RocketOutlined
} from "@ant-design/icons";
import {
  Button,
  Card,
  Col,
  Modal,
  PageHeader,
  Popover,
  Row,
  Skeleton,
  Statistic,
  Tooltip,
  Typography
} from "antd";
import moment from "moment";
import React, { Suspense, useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { IBuild } from "../../model/build.model";
import { IRootState } from "../../service";
import * as jobDataService from "../../service/jobs-data.service";
import { APP_TIMESTAMP_FORMAT, STATISTICS_STYLE } from "../../shared/constants";
import BuildStatisticErrorIndex from "../shared/BuildsStatisticErrorIndex";
import BuildStatisticErrorIndexByJob from "../shared/BuildStatisticErrorIndexByJob";
import Loading from "../shared/Loading";
import StaticJobs from "../shared/StatisticBuilds";
import StatisticDate from "../shared/StatisticDate";

const ProjectStatusInformation = React.lazy(
  () => import("../shared/ProjectStatusInformation")
);

interface IHeader {}
export const Header: React.FC<IHeader> = props => {
  const dispatch = useDispatch();
  const data = useSelector((store: IRootState) => store.jobFilter.filteredData);
  const loading = useSelector((store: IRootState) => store.data.loading);
  const [latestLoad, setLatestLoad] = useState<Date>(new Date());
  const [totalBuilds, setTotalBuilds] = useState<IBuild[]>([]);

  const selectedProduct = useSelector(
    (store: IRootState) => store.product.selectedProduct
  );

  const getData = () => {
    if (selectedProduct?.folder) {
      dispatch(jobDataService.loadData(selectedProduct.folder));
    }
  };

  useEffect(() => {
    if (data?.jobs) {
      setLatestLoad(new Date());
      setTotalBuilds(data.jobs.flatMap(e => e.builds));
    } else {
      setTotalBuilds([]);
    }
  }, [data]);

  const infoModal = () =>
    Modal.info({
      content: (
        <Suspense fallback={<Skeleton />}>
          <ProjectStatusInformation />
        </Suspense>
      ),
      onOk() {},
      width: 1000,
      centered: true
    });
  return (
    <Card style={{ margin: 24, marginTop: 10 }}>
      <PageHeader
        title={
          data.metadata?.title ? (
            <Typography.Title level={2}>
              {data.metadata?.title}
            </Typography.Title>
          ) : (
            <Skeleton.Input style={{ width: 200, height: 55.5 }} />
          )
        }
        subTitle={
          data.metadata?.subtitle ?? <Skeleton.Input style={{ width: 400 }} />
        }
        style={{ padding: 0 }}
        extra={[
          <Tooltip key="reaload" title="Reload information from service">
            <Button
              key="reload"
              type="primary"
              icon={<ReloadOutlined />}
              loading={loading}
              onClick={getData}
            >
              Reload
            </Button>
          </Tooltip>,
          <Tooltip key="info" title="Show project status information">
            <Button
              key="info"
              type="text"
              shape="circle"
              icon={<InfoCircleOutlined />}
              onClick={infoModal}
            />
          </Tooltip>
        ]}
      >
        <Row gutter={16}>
          <Col>
            <Statistic
              title="Generated By"
              value={data.metadata?.createdBy}
              valueStyle={STATISTICS_STYLE}
              suffix={
                data.metadata?.createdUrl ? (
                  <Tooltip title="Visit job generating the report">
                    <Button
                      type="link"
                      href={data.metadata?.createdUrl}
                      target="_blank"
                      icon={<LinkOutlined />}
                      style={{
                        padding: 0,
                        ...STATISTICS_STYLE,
                        fontWeight: "bold"
                      }}
                    />
                  </Tooltip>
                ) : null
              }
            />
          </Col>
          <Col>
            <Popover
              content={
                <Suspense fallback={<Loading />}>
                  <StaticJobs jobs={data.jobs} size={12} />
                </Suspense>
              }
              placement="bottom"
            >
              <Statistic
                title="Number of Jobs"
                prefix={<RocketOutlined />}
                value={data.jobs.length}
                valueStyle={{ ...STATISTICS_STYLE, fontWeight: "bold" }}
              />
            </Popover>
          </Col>
          <Col>
            <Popover
              content={
                <Suspense fallback={<Loading />}>
                  <StaticJobs jobs={data.jobs} size={12} />
                </Suspense>
              }
              placement="bottom"
            >
              <Statistic
                title="Number of Builds"
                prefix={<CloudSyncOutlined />}
                value={totalBuilds.length}
                valueStyle={STATISTICS_STYLE}
              />
            </Popover>
          </Col>
          <Col>
            <BuildStatisticErrorIndex
              title="Error Index"
              builds={totalBuilds}
              placement="bottom"
              popoverContent={
                <Suspense fallback={<Loading />}>
                  <BuildStatisticErrorIndexByJob jobs={data.jobs} />
                </Suspense>
              }
            />
          </Col>
          <Col>
            <Suspense fallback={<Loading style={{ fontSize: 16 }} />}>
              <StatisticDate
                date={
                  data.metadata?.date
                    ? moment(new Date(Date.parse(data.metadata?.date))).format(
                        APP_TIMESTAMP_FORMAT
                      )
                    : undefined
                }
                text="Creation Date"
              />
            </Suspense>
          </Col>
          <Col>
            <Suspense fallback={<Loading style={{ fontSize: 16 }} />}>
              <StatisticDate
                date={moment(latestLoad).format(APP_TIMESTAMP_FORMAT)}
                text="Latest Load"
              />
            </Suspense>
          </Col>
        </Row>
      </PageHeader>
    </Card>
  );
};

export default Header;
